package worker_test

import (
	"os"
	"sync"
	"testing"

	main "github.com/mlaradji/int-backend-mohamed/worker"
	"github.com/stretchr/testify/require"
)

var (
	LOREM = []byte(`Vivamus rutrum in est ultrices congue. Ut interdum nibh gravida, egestas lectus ut, convallis tortor. Cras id nisl non mi lacinia convallis ac sed ex. Nulla dictum congue scelerisque. Sed id erat lorem. Sed quam metus, vulputate id imperdiet vitae, volutpat at purus. Donec rhoncus non nibh nec mollis. Quisque velit erat, tempus sit amet malesuada vel, mattis et nulla. Proin vel felis vel nulla sodales rutrum eget non metus. Morbi et orci auctor, aliquet ligula nec, vehicula ante. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Praesent felis leo, interdum ut aliquam vel, placerat ac sapien.
	Duis viverra ipsum volutpat urna tincidunt scelerisque. Sed mi arcu, imperdiet at feugiat eget, consequat elementum massa. Proin luctus sodales mi nec mattis. In lacinia, urna eu varius dictum, metus ligula bibendum nunc, porttitor condimentum enim leo sed tellus. Donec eget pulvinar odio, in malesuada lorem. Fusce maximus est non dolor eleifend elementum. Donec et congue nibh, ullamcorper ultrices enim. Nulla facilisi. Praesent consequat ac risus id tristique. Ut id porta massa. Vivamus non dolor eleifend, faucibus eros aliquet, sagittis est. Ut interdum sagittis orci, sit amet maximus lectus egestas in. Curabitur in enim eget sem tristique aliquam. Duis condimentum tincidunt est, ut aliquet massa pretium at.
	Morbi aliquet laoreet volutpat. Donec elit lectus, efficitur sit amet ex et, eleifend pretium enim. Quisque molestie metus ac risus pretium, sed congue lectus consequat. Sed a arcu fringilla odio varius varius. Proin tempor purus at sapien efficitur tristique vitae vitae magna. Nullam mattis, massa in dignissim mattis, nulla est interdum lectus, vel aliquam magna nulla sit amet neque. Phasellus faucibus ipsum in ex sodales faucibus. Pellentesque vulputate ligula at placerat finibus. Aliquam non auctor orci, non fermentum velit. Morbi sed nisi nec lacus lobortis auctor. Vestibulum quis arcu a ligula egestas malesuada. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Sed sagittis dapibus est. In a rhoncus justo. Nullam aliquet diam sed felis commodo auctor. Vivamus feugiat leo sapien, ut lacinia leo finibus at.
	Aenean mollis metus nulla, in pretium quam venenatis non. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Etiam aliquet ultrices massa, ut convallis lectus efficitur non. In hac habitasse platea dictumst. Morbi ut imperdiet mi. Curabitur nec neque erat. Donec rutrum arcu nibh, ac fringilla augue euismod feugiat. Donec efficitur felis ex, eget interdum lectus dictum nec. Etiam feugiat eros sem, eu condimentum eros consectetur sed.
	Pellentesque pharetra hendrerit nunc, non efficitur nibh dignissim id. Nunc accumsan felis ac magna suscipit, et eleifend tortor dignissim. In elementum lorem tempor libero egestas accumsan. Aliquam pharetra lectus in magna faucibus imperdiet. Morbi finibus dictum lectus, in consequat orci iaculis a. Integer non luctus est. Nunc eu dui nec neque tristique ornare. Aliquam pellentesque ante accumsan dolor bibendum, id vehicula nibh aliquet. Donec auctor interdum vulputate. Sed ac ante non turpis sagittis maximus sed sit amet diam.`)
)

// TestTailFollowFile writes a known byte slice to a local file in chunks, checking that the watcher is working, and that what was written is the same as what was read.
func TestTailFollowFile(t *testing.T) {
	t.Parallel()

	// open the output file to write the test byte slice to
	outputFilename := "tmp/TestTailFollowFile.txt"
	require.NoFileExists(t, outputFilename) // an existing file could impact the reliability of the test
	outputFile, err := os.OpenFile(outputFilename, os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0644)
	require.Nil(t, err)

	// watch the output file for changes
	changed, err := main.WatchFile(done, outputFilename)
	require.Nil(t, err)

	var wg sync.WaitGroup

	for scanner.Scan() {
		go func() {
			<-written
			dummy, ok := <-changed
			require.True(t, dummy)
			require.True(t, ok)
			read <- true
		}()
		outputFile.Write(scanner.Bytes())
		written <- true
		<-read
	}
	require.Nil(t, scanner.Err())

	err = outputFile.Close()
	require.Nil(t, err)
}
