// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobServiceClient interface {
	JobStart(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobStartResponse, error)
	JobStop(ctx context.Context, in *JobStopRequest, opts ...grpc.CallOption) (*JobStopResponse, error)
	JobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error)
	JobLogsStream(ctx context.Context, in *JobLogsRequest, opts ...grpc.CallOption) (JobService_JobLogsStreamClient, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) JobStart(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobStartResponse, error) {
	out := new(JobStartResponse)
	err := c.cc.Invoke(ctx, "/int.backend.mohamed.JobService/JobStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) JobStop(ctx context.Context, in *JobStopRequest, opts ...grpc.CallOption) (*JobStopResponse, error) {
	out := new(JobStopResponse)
	err := c.cc.Invoke(ctx, "/int.backend.mohamed.JobService/JobStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) JobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error) {
	out := new(JobStatusResponse)
	err := c.cc.Invoke(ctx, "/int.backend.mohamed.JobService/JobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) JobLogsStream(ctx context.Context, in *JobLogsRequest, opts ...grpc.CallOption) (JobService_JobLogsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobService_ServiceDesc.Streams[0], "/int.backend.mohamed.JobService/JobLogsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobServiceJobLogsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobService_JobLogsStreamClient interface {
	Recv() (*JobLogsResponse, error)
	grpc.ClientStream
}

type jobServiceJobLogsStreamClient struct {
	grpc.ClientStream
}

func (x *jobServiceJobLogsStreamClient) Recv() (*JobLogsResponse, error) {
	m := new(JobLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobServiceServer is the server API for JobService service.
// All implementations must embed UnimplementedJobServiceServer
// for forward compatibility
type JobServiceServer interface {
	JobStart(context.Context, *JobStartRequest) (*JobStartResponse, error)
	JobStop(context.Context, *JobStopRequest) (*JobStopResponse, error)
	JobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error)
	JobLogsStream(*JobLogsRequest, JobService_JobLogsStreamServer) error
	mustEmbedUnimplementedJobServiceServer()
}

// UnimplementedJobServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (UnimplementedJobServiceServer) JobStart(context.Context, *JobStartRequest) (*JobStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStart not implemented")
}
func (UnimplementedJobServiceServer) JobStop(context.Context, *JobStopRequest) (*JobStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStop not implemented")
}
func (UnimplementedJobServiceServer) JobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStatus not implemented")
}
func (UnimplementedJobServiceServer) JobLogsStream(*JobLogsRequest, JobService_JobLogsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method JobLogsStream not implemented")
}
func (UnimplementedJobServiceServer) mustEmbedUnimplementedJobServiceServer() {}

// UnsafeJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServiceServer will
// result in compilation errors.
type UnsafeJobServiceServer interface {
	mustEmbedUnimplementedJobServiceServer()
}

func RegisterJobServiceServer(s grpc.ServiceRegistrar, srv JobServiceServer) {
	s.RegisterService(&JobService_ServiceDesc, srv)
}

func _JobService_JobStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).JobStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/int.backend.mohamed.JobService/JobStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).JobStart(ctx, req.(*JobStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_JobStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).JobStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/int.backend.mohamed.JobService/JobStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).JobStop(ctx, req.(*JobStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_JobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).JobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/int.backend.mohamed.JobService/JobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).JobStatus(ctx, req.(*JobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_JobLogsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobServiceServer).JobLogsStream(m, &jobServiceJobLogsStreamServer{stream})
}

type JobService_JobLogsStreamServer interface {
	Send(*JobLogsResponse) error
	grpc.ServerStream
}

type jobServiceJobLogsStreamServer struct {
	grpc.ServerStream
}

func (x *jobServiceJobLogsStreamServer) Send(m *JobLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// JobService_ServiceDesc is the grpc.ServiceDesc for JobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "int.backend.mohamed.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JobStart",
			Handler:    _JobService_JobStart_Handler,
		},
		{
			MethodName: "JobStop",
			Handler:    _JobService_JobStop_Handler,
		},
		{
			MethodName: "JobStatus",
			Handler:    _JobService_JobStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JobLogsStream",
			Handler:       _JobService_JobLogsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "job_service.proto",
}
